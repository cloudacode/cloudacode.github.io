{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Cloudacode Cloudacode Project \ud83d\ude80 Get started with step-by-step tutorials for cloud, devops, kubernetes, and cncf technology . Project layout \ud83d\udcda cloud/ ... # Cloud 101 devops(CICD)/ ... # Continuous Integration / Deployment devops(Terraform)/ ... # Terraform kubernetes/ ... # Kubernetes cncf/ ... # Cncf project etc/ ... # Etc Me \ud83e\uddd1\u200d\ud83d\ude80 A seasoned cloud and site reliability engineer with 12 years of experience in the web-scale tech industry. Areas of professional expertise: On and off-prem cloud environment engineering Deliver scalable and reliable infra with K8S Improve operation efficiency and modernize legacy environment Problem Solving / Strategic Thinking Cross-functional communications Project planning and management For full profile visit kyungcheol's Linkedin .","title":"Home"},{"location":"#welcome-to-cloudacode","text":"","title":"Welcome to Cloudacode"},{"location":"#cloudacode-project","text":"Get started with step-by-step tutorials for cloud, devops, kubernetes, and cncf technology .","title":"Cloudacode Project \ud83d\ude80"},{"location":"#project-layout","text":"cloud/ ... # Cloud 101 devops(CICD)/ ... # Continuous Integration / Deployment devops(Terraform)/ ... # Terraform kubernetes/ ... # Kubernetes cncf/ ... # Cncf project etc/ ... # Etc","title":"Project layout \ud83d\udcda"},{"location":"#me","text":"A seasoned cloud and site reliability engineer with 12 years of experience in the web-scale tech industry. Areas of professional expertise: On and off-prem cloud environment engineering Deliver scalable and reliable infra with K8S Improve operation efficiency and modernize legacy environment Problem Solving / Strategic Thinking Cross-functional communications Project planning and management For full profile visit kyungcheol's Linkedin .","title":"Me \ud83e\uddd1\u200d\ud83d\ude80"},{"location":"cloud/aws/apache-tomcat-redis/","text":"Build a 3tier Web App on AWS The basic unit of a 3 tier web application which is Apache + Tomcat + Redis + DB and we will use Redis for tomcat session clustering. WEB(Apache), WAS(Tomcat) + Session Clustering(Redis), DB \uad6c\uc131\uc744 \ud1b5\ud574 \uae30\ubcf8\uc801\uc778 \uc6f9\uc11c\ube44\uc2a4\uc758 3 Tier \uad6c\uc131\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf8\ub2e4. This tutorial uses the AWS and highly recommend using AWS for setting up the infrastructure to test 3 tier web app. Time to Complete: 2-3 hours Cost to Complete: Many of the services used are included in the AWS Free Tier. For those that are not, the sample application will cost, in total, less than $2/day. Tutorial Prereqs: An AWS Account and Administrator-level or PowerUser-level access to it Please be sure to terminate all of the resources created during this workshop to ensure that you are no longer charged. System Architecture 1. Create a Web Server Create EC2 instances First, create Ubuntu 18.04 EC2 instance(s) for Web Server(s), with public IP and allow 80 for any. Install Apache on Ubuntu 18.04 Install via apt package $ sudo apt update $ sudo apt install apache2 2. Create a WAS Server Create EC2 instances First, create Ubuntu 18.04 EC2 instance(s) for Was Server(s), with public IP, allow 8080 for any, and allow 8009 for WEB server SG group. Set up a Tomcat User Note Tomcat should be run as an unprivileged user (i.e. not root) $ sudo groupadd tomcat $ sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat Install Tomcat via Source package First, Tomcat needs JDK $ sudo apt update $ sudo apt install default-jdk -y $ sudo update-java-alternatives -l Download Tomcat Source package Download $ curl -O https://ftpmirror1.infania.net/mirror/apache/tomcat/tomcat-9/v9.0.41/bin/apache-tomcat-9.0.41.tar.gz Execute the following command to create tomcat directory and extract source pakcage $ sudo mkdir /opt/tomcat $ sudo tar xzvf apache-tomcat-*tar.gz -C /opt/tomcat --strip-components=1 Set up the permission for tomcat user/group cd /opt/tomcat sudo chgrp -R tomcat /opt/tomcat sudo chmod -R g+r conf sudo chmod g+x conf sudo chown -R tomcat webapps/ work/ temp/ logs/ Now, configure the systemd service file /etc/systemd/system/tomcat.service [Unit] Description=Apache Tomcat Web Application Container After=network.target [Service] Type=forking Environment=JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64 Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid Environment=CATALINA_HOME=/opt/tomcat Environment=CATALINA_BASE=/opt/tomcat Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC' Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom' ExecStart=/opt/tomcat/bin/startup.sh ExecStop=/opt/tomcat/bin/shutdown.sh User=tomcat Group=tomcat UMask=0007 RestartSec=10 Restart=always [Install] WantedBy=multi-user.target Start tomcat service sudo systemctl daemon-reload sudo systemctl start tomcat sudo systemctl status tomcat Open your browser to check tomcat server http://was_server_IP:8080 Congratulations, you have installed the basic tomcat server Create sample Webapp in Tomcat $ cd /opt/tomcat $ sudo mkdir -p webapps/demo index.jsp <html> <body> TOMCAT DEMO </body> </html> Restart tomcat service $ sudo systemctl restart tomcat.service http://WAS_SERVER_IP:8080/demo Now, you have a new demo webapp 3. Integrate apache and tomcat via AJP protocol Note Tomcat AJP protocol connector https://tomcat.apache.org/tomcat-7.0-doc/config/ajp.html Enable AJP in Tomcat server In order to make connection between apache and tomcat, enable AJP connector in /opt/tomcat/conf/server.xml <!-- Define an AJP 1.3 Connector on port 8009 --> <Connector protocol=\"AJP/1.3\" address=\"0.0.0.0\" secretRequired=\"false\" port=\"8009\" redirectPort=\"8443\" /> <Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"ajp13_worker01\"> Please keep in mind, the jvmRoute value stands for worker name and each WAS has a unique name. Restart tomcat service $ sudo systemctl restart tomcat.service Setup mod_jk module in Apache server Install mod_jk library $ cd /etc/apache2 $ sudo apt-get install libapache2-mod-jk $ sudo ln -s /etc/libapache2-mod-jk/workers.properties Configure worker infomation as WAS server in workers.properties Single WAS server, workers.tomcat_home=/usr/share/tomcat8 workers.java_home=/usr/lib/jvm/default-java ps=/ worker.list=ajp13_worker_lb worker.ajp13_worker01.port=8009 worker.ajp13_worker01.host=`WAS Server IP` worker.ajp13_worker01.type=ajp13 worker.ajp13_worker01.lbfactor=100 worker.ajp13_worker_lb.type=lb worker.ajp13_worker_lb.balance_workers=ajp13_worker01 Multiple WAS servers, workers.tomcat_home=/usr/share/tomcat8 workers.java_home=/usr/lib/jvm/default-java ps=/ worker.list=ajp13_worker_lb worker.ajp13_worker01.port=8009 worker.ajp13_worker01.host=`WAS Server01 IP` worker.ajp13_worker01.type=ajp13 worker.ajp13_worker01.lbfactor=50 worker.ajp13_worker02.port=8009 worker.ajp13_worker02.host=`WAS Server02 IP` worker.ajp13_worker02.type=ajp13 worker.ajp13_worker02.lbfactor=50 worker.ajp13_worker_lb.type=lb worker.ajp13_worker_lb.balance_workers=ajp13_worker01,ajp13_worker02 Note Loadbalancing https://tomcat.apache.org/connectors-doc/common_howto/loadbalancers.html In order to forward traffic to tomcat, add JkMount configuration in site default file( /etc/apache2/sites-enabled/000-default.conf ) <VirtualHost *:80> ServerAdmin localhost DocumentRoot /var/www/html JkMount /*.jsp ajp13_worker_lb ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Restart Apache service $ sudo systemctl restart apache.service Now, the Apache forwards JSP request to Tomcat and response http://WEB_SERVER_IP:8080/demo/index.jsp Congratulations, you have integrated WEB, WAS tier 4. Tomcat Session Clustering with Redis We have several options to set up the session clustering, and this tutorial is going to use Redisson-tomcat library which is the most active library for Redis session clustering. Create the ElastiCache cluster First, create Redis via ElastiCache cluster, and allow 6379 for WAS server SG group. Setup the Redisson library Download redisson-all , redisson-tomcat library in tomcat lib directory $ sudo curl -O https://repository.sonatype.org/service/local/repositories/central-proxy/content/org/redisson/redisson-all/3.15.0/redisson-all-3.15.0.jar $ sudo curl -O https://repository.sonatype.org/service/local/repositories/central-proxy/content/org/redisson/redisson -tomcat-9/3.15.0/redisson-tomcat-9-3.15.0.jar $ sudo mv redisson* /opt/tomcat/lib/ Add the redisson class in conf/context.xml <Manager className=\"org.redisson.tomcat.RedissonSessionManager\" configPath=\"${catalina.base}/conf/redisson.conf\" readMode=\"REDIS\" updateMode=\"DEFAULT\" broadcastSessionEvents=\"false\" keyPrefix=\"\"/> Setup the conf/redisson.conf { \"singleServerConfig\":{ \"address\": \"redis://`ElastiCache_Cluster`:6379\" }, \"threads\":0, \"nettyThreads\":0, \"transportMode\":\"NIO\" } Restart tomcat service $ sudo systemctl restart tomcat.service Now, you can check session information in Redis If you don't have redis-client , install redis-tools apt package apt-get install redis-tools Access redis cluster and check keys which are the session ID. $ redis-cli -h session01.mvqc4c.0001.apn2.cache.amazonaws.com session01.mvqc4c.0001.apn2.cache.amazonaws.com:6379> KEYS * 1) \"redisson:tomcat_session:959CB3E05C307CB9ECCEB4534E84CFE8.ajp13_worker01\" 2) \"redisson:tomcat_session:7616482947EC5AC55A6ACDFF5F4BEC01.ajp13_worker02\" Add following JSP file to check via browser webapps/demo/session.jsp <html> <body> <table border=\"1\"> <tr> <td>Session ID</td> <td><%=session.getId()%></td> </tr> <tr> <td>Server IP</td> <td><%=request.getLocalAddr()%></td> </tr> </table> <div>Server Name: <b><%=request.getLocalName()%></b></div> </body> </html> Restart apache2 service $ sudo systemctl restart apache2 http://WEB_SERVER_IP/demo/session.jsp Please stop one of the tomcat servers and check the session is still in place Congratulations, you have integrated Session Clustering 5. Implement Database Deploy a RDS First, create Mysql via RDS , and allow 3306 for WAS server SG group. Create a dummy database Access RDS and create a Dummy database create database javatest; use javatest; create table testdata (id int not null auto_increment primary key, foo varchar(25), bar int); insert into testdata values(null, 'hello', 12345); select * from testdata; Setup mysql connector for Tomcat In order to connect mysql, add mysql connector in the WAS(Tomcat) server(s) $ cd tmp/ $ curl -O https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-8.0.23.zip $sudo mv /tmp/mysql-connector-java-8.0.23/mysql-connector-java-8.0.23.jar /opt/tomcat/lib/ Update conf/context.xml <Resource name=\"jdbc/TestDB\" auth=\"Container\" type=\"javax.sql.DataSource\" maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\" username=\"DB_USERNAME\" password=\"DB_PASSWORD\" driverClassName=\"com.mysql.jdbc.Driver\" url=\"jdbc:mysql://RDS_ENDPOINT:3306/javatest\"/> Please change the DB_USERNAME , DB_PASSWORD , and RDS_ENDPOINT Add following JSP file in the webapps/demo/testdb.jsp to check via browser <%@page import=\"java.sql.DriverManager\"%> <%@page import=\"java.sql.ResultSet\"%> <%@page import=\"java.sql.Statement\"%> <%@page import=\"java.sql.Connection\"%> <% String id = request.getParameter(\"userid\"); String driver = \"com.mysql.jdbc.Driver\"; String connectionUrl = \"jdbc:mysql://RDS_ENDPOINT:3306/\"; String database = \"javatest\"; String userid = \"DB_USERNAME\"; String password = \"DB_PASSWORD\"; try { Class.forName(driver); } catch (ClassNotFoundException e) { e.printStackTrace(); } Connection connection = null; Statement statement = null; ResultSet resultSet = null; %> <!DOCTYPE html> <html> <body> <table border=\"1\"> <tr> <td>session id</td> <td><%=session.getId()%></td> </tr> <tr> <td>foo</td> <td>bar</td> </tr> <% try{ connection = DriverManager.getConnection(connectionUrl+database, userid, password); statement=connection.createStatement(); String sql =\"select id, foo, bar from testdata\"; resultSet = statement.executeQuery(sql); while(resultSet.next()){ %> <tr> <td><%=resultSet.getString(\"foo\") %></td> <td><%=resultSet.getString(\"bar\") %></td> </tr> <% } connection.close(); } catch (Exception e) { e.printStackTrace(); } %> </table> </body> </html> Restart apache2 service $ sudo systemctl restart tomcat.service Now, this testdb.jsp will return the DB result which is in the RDS http://WEB_SERVER_IP/demo/testdb.jsp Congratulations, you have completed WEB, WAS, DB tutorial Reference https://www.digitalocean.com/community/questions/apache-virtual-host-with-multiple-tomcat-server https://github.com/redisson/redisson/wiki/2.-Configuration#221-yaml-file-based-configuration","title":"Build a 3tier Web App on AWS"},{"location":"cloud/aws/apache-tomcat-redis/#build-a-3tier-web-app-on-aws","text":"The basic unit of a 3 tier web application which is Apache + Tomcat + Redis + DB and we will use Redis for tomcat session clustering. WEB(Apache), WAS(Tomcat) + Session Clustering(Redis), DB \uad6c\uc131\uc744 \ud1b5\ud574 \uae30\ubcf8\uc801\uc778 \uc6f9\uc11c\ube44\uc2a4\uc758 3 Tier \uad6c\uc131\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf8\ub2e4. This tutorial uses the AWS and highly recommend using AWS for setting up the infrastructure to test 3 tier web app. Time to Complete: 2-3 hours Cost to Complete: Many of the services used are included in the AWS Free Tier. For those that are not, the sample application will cost, in total, less than $2/day. Tutorial Prereqs: An AWS Account and Administrator-level or PowerUser-level access to it Please be sure to terminate all of the resources created during this workshop to ensure that you are no longer charged.","title":"Build a 3tier Web App on AWS"},{"location":"cloud/aws/apache-tomcat-redis/#system-architecture","text":"","title":"System Architecture"},{"location":"cloud/aws/apache-tomcat-redis/#1-create-a-web-server","text":"","title":"1. Create a Web Server"},{"location":"cloud/aws/apache-tomcat-redis/#create-ec2-instances","text":"First, create Ubuntu 18.04 EC2 instance(s) for Web Server(s), with public IP and allow 80 for any.","title":"Create EC2 instances"},{"location":"cloud/aws/apache-tomcat-redis/#install-apache-on-ubuntu-1804","text":"Install via apt package $ sudo apt update $ sudo apt install apache2","title":"Install Apache on Ubuntu 18.04"},{"location":"cloud/aws/apache-tomcat-redis/#2-create-a-was-server","text":"","title":"2. Create a WAS Server"},{"location":"cloud/aws/apache-tomcat-redis/#create-ec2-instances_1","text":"First, create Ubuntu 18.04 EC2 instance(s) for Was Server(s), with public IP, allow 8080 for any, and allow 8009 for WEB server SG group.","title":"Create EC2 instances"},{"location":"cloud/aws/apache-tomcat-redis/#set-up-a-tomcat-user","text":"Note Tomcat should be run as an unprivileged user (i.e. not root) $ sudo groupadd tomcat $ sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat","title":"Set up a Tomcat User"},{"location":"cloud/aws/apache-tomcat-redis/#install-tomcat-via-source-package","text":"First, Tomcat needs JDK $ sudo apt update $ sudo apt install default-jdk -y $ sudo update-java-alternatives -l Download Tomcat Source package Download $ curl -O https://ftpmirror1.infania.net/mirror/apache/tomcat/tomcat-9/v9.0.41/bin/apache-tomcat-9.0.41.tar.gz Execute the following command to create tomcat directory and extract source pakcage $ sudo mkdir /opt/tomcat $ sudo tar xzvf apache-tomcat-*tar.gz -C /opt/tomcat --strip-components=1 Set up the permission for tomcat user/group cd /opt/tomcat sudo chgrp -R tomcat /opt/tomcat sudo chmod -R g+r conf sudo chmod g+x conf sudo chown -R tomcat webapps/ work/ temp/ logs/ Now, configure the systemd service file /etc/systemd/system/tomcat.service [Unit] Description=Apache Tomcat Web Application Container After=network.target [Service] Type=forking Environment=JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64 Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid Environment=CATALINA_HOME=/opt/tomcat Environment=CATALINA_BASE=/opt/tomcat Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC' Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom' ExecStart=/opt/tomcat/bin/startup.sh ExecStop=/opt/tomcat/bin/shutdown.sh User=tomcat Group=tomcat UMask=0007 RestartSec=10 Restart=always [Install] WantedBy=multi-user.target Start tomcat service sudo systemctl daemon-reload sudo systemctl start tomcat sudo systemctl status tomcat Open your browser to check tomcat server http://was_server_IP:8080 Congratulations, you have installed the basic tomcat server","title":"Install Tomcat via Source package"},{"location":"cloud/aws/apache-tomcat-redis/#create-sample-webapp-in-tomcat","text":"$ cd /opt/tomcat $ sudo mkdir -p webapps/demo index.jsp <html> <body> TOMCAT DEMO </body> </html> Restart tomcat service $ sudo systemctl restart tomcat.service http://WAS_SERVER_IP:8080/demo Now, you have a new demo webapp","title":"Create sample Webapp in Tomcat"},{"location":"cloud/aws/apache-tomcat-redis/#3-integrate-apache-and-tomcat-via-ajp-protocol","text":"Note Tomcat AJP protocol connector https://tomcat.apache.org/tomcat-7.0-doc/config/ajp.html","title":"3. Integrate apache and tomcat via AJP protocol"},{"location":"cloud/aws/apache-tomcat-redis/#enable-ajp-in-tomcat-server","text":"In order to make connection between apache and tomcat, enable AJP connector in /opt/tomcat/conf/server.xml <!-- Define an AJP 1.3 Connector on port 8009 --> <Connector protocol=\"AJP/1.3\" address=\"0.0.0.0\" secretRequired=\"false\" port=\"8009\" redirectPort=\"8443\" /> <Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"ajp13_worker01\"> Please keep in mind, the jvmRoute value stands for worker name and each WAS has a unique name. Restart tomcat service $ sudo systemctl restart tomcat.service","title":"Enable AJP in Tomcat server"},{"location":"cloud/aws/apache-tomcat-redis/#setup-mod_jk-module-in-apache-server","text":"Install mod_jk library $ cd /etc/apache2 $ sudo apt-get install libapache2-mod-jk $ sudo ln -s /etc/libapache2-mod-jk/workers.properties Configure worker infomation as WAS server in workers.properties Single WAS server, workers.tomcat_home=/usr/share/tomcat8 workers.java_home=/usr/lib/jvm/default-java ps=/ worker.list=ajp13_worker_lb worker.ajp13_worker01.port=8009 worker.ajp13_worker01.host=`WAS Server IP` worker.ajp13_worker01.type=ajp13 worker.ajp13_worker01.lbfactor=100 worker.ajp13_worker_lb.type=lb worker.ajp13_worker_lb.balance_workers=ajp13_worker01 Multiple WAS servers, workers.tomcat_home=/usr/share/tomcat8 workers.java_home=/usr/lib/jvm/default-java ps=/ worker.list=ajp13_worker_lb worker.ajp13_worker01.port=8009 worker.ajp13_worker01.host=`WAS Server01 IP` worker.ajp13_worker01.type=ajp13 worker.ajp13_worker01.lbfactor=50 worker.ajp13_worker02.port=8009 worker.ajp13_worker02.host=`WAS Server02 IP` worker.ajp13_worker02.type=ajp13 worker.ajp13_worker02.lbfactor=50 worker.ajp13_worker_lb.type=lb worker.ajp13_worker_lb.balance_workers=ajp13_worker01,ajp13_worker02 Note Loadbalancing https://tomcat.apache.org/connectors-doc/common_howto/loadbalancers.html In order to forward traffic to tomcat, add JkMount configuration in site default file( /etc/apache2/sites-enabled/000-default.conf ) <VirtualHost *:80> ServerAdmin localhost DocumentRoot /var/www/html JkMount /*.jsp ajp13_worker_lb ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Restart Apache service $ sudo systemctl restart apache.service Now, the Apache forwards JSP request to Tomcat and response http://WEB_SERVER_IP:8080/demo/index.jsp Congratulations, you have integrated WEB, WAS tier","title":"Setup mod_jk module in Apache server"},{"location":"cloud/aws/apache-tomcat-redis/#4-tomcat-session-clustering-with-redis","text":"We have several options to set up the session clustering, and this tutorial is going to use Redisson-tomcat library which is the most active library for Redis session clustering.","title":"4. Tomcat Session Clustering with Redis"},{"location":"cloud/aws/apache-tomcat-redis/#create-the-elasticache-cluster","text":"First, create Redis via ElastiCache cluster, and allow 6379 for WAS server SG group.","title":"Create the ElastiCache cluster"},{"location":"cloud/aws/apache-tomcat-redis/#setup-the-redisson-library","text":"Download redisson-all , redisson-tomcat library in tomcat lib directory $ sudo curl -O https://repository.sonatype.org/service/local/repositories/central-proxy/content/org/redisson/redisson-all/3.15.0/redisson-all-3.15.0.jar $ sudo curl -O https://repository.sonatype.org/service/local/repositories/central-proxy/content/org/redisson/redisson -tomcat-9/3.15.0/redisson-tomcat-9-3.15.0.jar $ sudo mv redisson* /opt/tomcat/lib/ Add the redisson class in conf/context.xml <Manager className=\"org.redisson.tomcat.RedissonSessionManager\" configPath=\"${catalina.base}/conf/redisson.conf\" readMode=\"REDIS\" updateMode=\"DEFAULT\" broadcastSessionEvents=\"false\" keyPrefix=\"\"/> Setup the conf/redisson.conf { \"singleServerConfig\":{ \"address\": \"redis://`ElastiCache_Cluster`:6379\" }, \"threads\":0, \"nettyThreads\":0, \"transportMode\":\"NIO\" } Restart tomcat service $ sudo systemctl restart tomcat.service Now, you can check session information in Redis If you don't have redis-client , install redis-tools apt package apt-get install redis-tools Access redis cluster and check keys which are the session ID. $ redis-cli -h session01.mvqc4c.0001.apn2.cache.amazonaws.com session01.mvqc4c.0001.apn2.cache.amazonaws.com:6379> KEYS * 1) \"redisson:tomcat_session:959CB3E05C307CB9ECCEB4534E84CFE8.ajp13_worker01\" 2) \"redisson:tomcat_session:7616482947EC5AC55A6ACDFF5F4BEC01.ajp13_worker02\" Add following JSP file to check via browser webapps/demo/session.jsp <html> <body> <table border=\"1\"> <tr> <td>Session ID</td> <td><%=session.getId()%></td> </tr> <tr> <td>Server IP</td> <td><%=request.getLocalAddr()%></td> </tr> </table> <div>Server Name: <b><%=request.getLocalName()%></b></div> </body> </html> Restart apache2 service $ sudo systemctl restart apache2 http://WEB_SERVER_IP/demo/session.jsp Please stop one of the tomcat servers and check the session is still in place Congratulations, you have integrated Session Clustering","title":"Setup the Redisson library"},{"location":"cloud/aws/apache-tomcat-redis/#5-implement-database","text":"","title":"5. Implement Database"},{"location":"cloud/aws/apache-tomcat-redis/#deploy-a-rds","text":"First, create Mysql via RDS , and allow 3306 for WAS server SG group.","title":"Deploy a RDS"},{"location":"cloud/aws/apache-tomcat-redis/#create-a-dummy-database","text":"Access RDS and create a Dummy database create database javatest; use javatest; create table testdata (id int not null auto_increment primary key, foo varchar(25), bar int); insert into testdata values(null, 'hello', 12345); select * from testdata;","title":"Create a dummy database"},{"location":"cloud/aws/apache-tomcat-redis/#setup-mysql-connector-for-tomcat","text":"In order to connect mysql, add mysql connector in the WAS(Tomcat) server(s) $ cd tmp/ $ curl -O https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-8.0.23.zip $sudo mv /tmp/mysql-connector-java-8.0.23/mysql-connector-java-8.0.23.jar /opt/tomcat/lib/ Update conf/context.xml <Resource name=\"jdbc/TestDB\" auth=\"Container\" type=\"javax.sql.DataSource\" maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\" username=\"DB_USERNAME\" password=\"DB_PASSWORD\" driverClassName=\"com.mysql.jdbc.Driver\" url=\"jdbc:mysql://RDS_ENDPOINT:3306/javatest\"/> Please change the DB_USERNAME , DB_PASSWORD , and RDS_ENDPOINT Add following JSP file in the webapps/demo/testdb.jsp to check via browser <%@page import=\"java.sql.DriverManager\"%> <%@page import=\"java.sql.ResultSet\"%> <%@page import=\"java.sql.Statement\"%> <%@page import=\"java.sql.Connection\"%> <% String id = request.getParameter(\"userid\"); String driver = \"com.mysql.jdbc.Driver\"; String connectionUrl = \"jdbc:mysql://RDS_ENDPOINT:3306/\"; String database = \"javatest\"; String userid = \"DB_USERNAME\"; String password = \"DB_PASSWORD\"; try { Class.forName(driver); } catch (ClassNotFoundException e) { e.printStackTrace(); } Connection connection = null; Statement statement = null; ResultSet resultSet = null; %> <!DOCTYPE html> <html> <body> <table border=\"1\"> <tr> <td>session id</td> <td><%=session.getId()%></td> </tr> <tr> <td>foo</td> <td>bar</td> </tr> <% try{ connection = DriverManager.getConnection(connectionUrl+database, userid, password); statement=connection.createStatement(); String sql =\"select id, foo, bar from testdata\"; resultSet = statement.executeQuery(sql); while(resultSet.next()){ %> <tr> <td><%=resultSet.getString(\"foo\") %></td> <td><%=resultSet.getString(\"bar\") %></td> </tr> <% } connection.close(); } catch (Exception e) { e.printStackTrace(); } %> </table> </body> </html> Restart apache2 service $ sudo systemctl restart tomcat.service Now, this testdb.jsp will return the DB result which is in the RDS http://WEB_SERVER_IP/demo/testdb.jsp Congratulations, you have completed WEB, WAS, DB tutorial","title":"Setup mysql connector for Tomcat"},{"location":"cloud/aws/apache-tomcat-redis/#reference","text":"https://www.digitalocean.com/community/questions/apache-virtual-host-with-multiple-tomcat-server https://github.com/redisson/redisson/wiki/2.-Configuration#221-yaml-file-based-configuration","title":"Reference"},{"location":"cloud/aws/ec2-setup/","text":"Launch an EC2, Deploy Flask app AWS EC2 \uad6c\uc131 \ubc0f Python Flask \uc571 \ubc30\ud3ec \uc774\ubc88 \uc2e4\uc2b5\uc740 AWS\ub97c \ud1b5\ud574 \uc11c\ube44\uc2a4 \uad6c\uc131 \uc2dc \uac00\uc7a5 \uae30\ubcf8\uc774 \ub418\ub294 EC2 \uad6c\uc131 \uc2e4\uc2b5\uc744 \ud1b5\ud574\uc11c AWS\uc758 \uae30\ubcf8 \uc11c\ube44\uc2a4\ub4e4\uc744 \uc774\ud574 \ud558\uace0 AWS \ucf58\uc194 \ud65c\uc6a9 \ubc29\ubc95\uc744 \uc775\ud788\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. EC2\ub85c \ucef4\ud4e8\ud305 \ub9ac\uc18c\uc2a4 \ud65c\uc6a9 \ubc0f \uc11c\ube44\uc2a4 \ubc30\ud3ec\ub97c \uc704\ud55c \uae30\ubcf8 \uc791\uc5c5\ub4e4\uc744 \uc774\ud574 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Time to Complete: 1-2 hours Tutorial Prereqs: An AWS Account and Administrator-level or PowerUser-level access to it System Architecture 1. Launch EC2 instance https://ap-northeast-2.console.aws.amazon.com/ec2/v2/home?region=ap-northeast-2 Choose an Amazon Machine Image(AMI) Instance \uc758 OS \uc774\ubbf8\uc9c0\ub97c \uc120\ud0dd\ud558\ub294 \ub2e8\uacc4 \uc774\uba70 Amazon Linux, CentOS, Ubunt, WindowsOS \ub4f1 \ub2e4\uc591\ud55c OS \uc774\ubbf8\uc9c0\ub97c \uc120\ud0dd \uac00\ub2a5 Amazon Linux 2 AMI (HVM), SSD Volume Type Chooose an Instance Type Instance\uc758 CPU, Memory , Network \uc6a9\ub7c9\uc744 \uc120\ud0dd \ud558\ub294 \ub2e8\uacc4\uc774\uba70 \uc77c\ubc18 \uc778\uc2a4\ud134\ud2b8 \ud0c0\uc785\uc678\uc5d0 \ub192\uc740 CPU, Memory, IO \ud0c0\uc785\ub3c4 \uc81c\uacf5 t2.micro Instance Details Instance\uac00 \ubc30\ud3ec\ub418\ub294 \ub124\ud2b8\uc6cc\ud06c \ud658\uacbd VPC, Subnet) \uc124\uc815 Number of instances: \ud55c\ubc88\uc5d0 \ubc30\ud3ec\ud560 \uc778\uc2a4\ud134\uc2a4\uc758 \uac1c\uc218\uc774\uba70 1\ub85c \uc720\uc9c0 Purchasing option: Spot instances\ub97c \ud65c\uc6a9 \ud560\uac74\uc9c0\uc758 \uc720\ubb34, \uc120\ud0dd \ud558\uc9c0 \uc54a\uc74c Network: Default VPC \uc120\ud0dd Subnet: No preference Auto-assign Public IP: \uc790\ub3d9\uc73c\ub85c Public IP \ud560\ub2f9 \uc720\ubb34\ub97c \uccb4\ud06c \ud558\ub294 \ubd80\ubd84 Enable\ub85c \uc120\ud0dd IAM role: EC2 \uc778\uc2a4\ud134\uc2a4\uc5d0 IAM \uc5ed\ud560\uc744 \ubd80\uc5ec\ud574 \ucd94\ud6c4 API/ Secret key\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 AWS \uc18c\uc2a4 \uc790\uc6d0\uc744 \uad00\ub9ac \ud558\ub3c4\ub85d \uc124\uc815 \ud558\ub294 \ubd80\ubd84 Tenancy: \ucd94\ud6c4\uc5d0 License\uc774\uc288 \ud639\uc740 \ub9e4\uc6b0 \ub0ae\uc740 \ub124\ud2b8\uc6cc\ud06c Latency\ub97c \uc704\ud574 \ud2b9\uc815 Hardware\uc5d0 Instance\ub97c \ubab0\uc544\uc11c \ubc30\uce58\ud560 \uc218 \uc788\ub294 \uae30\ub2a5, Default(Shared)\ub85c \uc120\ud0dd Instance Storage \uc124\uc815 Instance\uc758 Disk \uc6a9\ub7c9\uacfc \ucd94\uac00 Disk\ub97c \uc120\ud0dd, Root \ubcfc\ub968 size\uc640 Disk \ubcfc\ub968\uc758 \uc720\ubb34, size\ub97c \uc815\ud558\ub294 \ubd80\ubd84 \uae30\ubcf8 8GB \ub85c \uc9c4\ud589 Add Tags AWS\ucf58\uc194\uc5d0\uc11c Display \ub418\ub294 Tag \uc758 \uac12\uc744 \uc9c0\uc815 \ud558\ub294 \ubd80\ubd84 \uc774\uace0 Add Tag \ud15d \ud074\ub9ad \ud6c4 \uac12 \uc785\ub825 (*\ucd94\ud6c4 \uc190\uc27d\uac8c \uc0dd\uc131\ud55c \uc11c\ubc84\ub97c \ucc3e\uae30 \uc704\ud568\uc774\uba70 \uae30\uc5b5\ud560 \uc218 \uc788\ub294 \uc774\ub984\uc73c\ub85c \uc11c\ubc84 \uc774\ub984 \ubcc0\uacbd \uac00\ub2a5 Key: Name, Value: Web Server Configure Security Group SG\ub294 Host \ub808\ubca8\uc758 \ubc29\ud654\ubcbd\uc774\uba70 Allow \uc815\ucc45\ub9cc \uac00\ub2a5\ud558\uba70 \uc11c\ube44\uc2a4\ud560 Port \ub9cc \ud5c8\uc6a9 \ud639\uc740 \uc6d0\uaca9 \uc811\uc18d\uc744 \uc704\ud55c \uc811\uadfc \ub300\uc5ed IP \ub85c\ub9cc \uc81c\ud55c\uc744 \ud1b5\ud574 \ubcf4\uc548 \uc218\uc900\uc744 \ub192\uc784 Secuirty Group Name: test-flask-sg SSH(22) Type: SSH Source: My IP or Anywhere TCP(5000, Flask) Type: Custom TCP PORT: 5000 Source: My IP or Anywhere Note \ub9cc\uc57d node.js \ud639\uc740 django \ub85c \uc2e4\uc2b5\uc744 \uc218\ud589\ud560 \uc2dc\uc5d0 \ud574\ub2f9 \ud3ec\ud2b8\uc5d0 \ub9de\uac8c Custom TCP port \uc124\uc815 \ubcc0\uacbd Review Instance Launch Instance \ubc30\ud3ec\ub97c \uc704\ud574 \uc9c0\uc815\ud55c \uc124\uc815\uac12\ub4e4\uc744 \ub9ac\ubdf0 \ud558\ub294 \ub2e8\uacc4 \uc774\uba70 \uc11c\ubc84\uc5d0 \uc811\uadfc\uc744 \uc704\ud55c key \ubc1c\uae09\uc744 \uc9c4\ud589, Launch \ud074\ub9ad\ud6c4 key pair \uc0dd\uc131 Create a new key pair \uc9c4\ud589 \ud6c4 Download Key Pair Warning key\ub294 \uc7ac\ubc1c\uae09 \ub418\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc548\uc804\ud55c \uacf3\uc5d0 key \ub97c \uc800\uc7a5 2. Monitor EC2 instance \uc815\uc0c1\uc801\uc73c\ub85c Instance\uac00 \ubc30\ud3ec \ub418\ub294\uc9c0 EC2 Dashboard\uc5d0\uc11c \ud655\uc778 \uac00\ub2a5 Status Checks \uac00 2/2\uac00 \ub418\uba74 \uc815\uc0c1 \ubc30\ud3ec \uc644\ub8cc 3. Access EC2 instance EC2 \ucf58\uc194 \uc5d0\uc11c \uc0dd\uc131\ud55c \uc778\uc2a4\ud134\uc2a4 \uc120\ud0dd \ud6c4 connect \ubc84\ud2bc\uc744 \ud074\ub9ad\ud558\uba74 \ud130\ubbf8\ub110\ub85c \uc811\uc18d \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5 ssh -i <your_key> ec2-user@<EC2_HOSTNAME> \ub9cc\uc57d Windows\ub97c \uc0ac\uc6a9 \ud558\uace0 \uc788\ub2e4\uba74 Xshell\uc744 \ud65c\uc6a9 \uacf5\uc2dd \ud648\ud398\uc774\uc9c0\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc URL: https://www.netsarang.co.kr/download/main.html \ud56d\ubaa9: Xshell5 https://www.netsarang.co.kr/download/down_form.html?code=512 \uc0c8\ub85c\uc6b4 \uc138\uc158 \uc0dd\uc131 \ubc0f \uc0ac\uc6a9\uc790 \uc778\uc99d 4. Run Python Flask on EC2 server \uc811\uadfc\ud55c Linux\uc5d0\uc11c Flask \uc124\uce58 pip3 install Flask pip3 freeze > requirements.txt Flask app \ud30c\uc77c \uc124\uc815 app.py cat <<EOF > app.py from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return \"Hello, EC2!\" if __name__ == \"__main__\": app.run(debug=True, host='0.0.0.0', port=5000) EOF Flask app \uc2e4\ud589 python3 app.py EC2 \ucf58\uc194 \uc5d0\uc11c Public IPv4 address \ud655\uc778 \ud639\uc740 \ub9ac\ub205\uc2a4 \ucee4\uba58\ub4dc\ub85c curl ifconfig.me \ud6c4 \ud574\ub2f9 IP\uc5d0 Flask \ud3ec\ud2b8(5000) \uc73c\ub85c \uc811\uc18d \ubc0f \ud398\uc774\uc9c0 \ud655\uc778 (\uc635\uc158) Flask\uc5d0 CSS, HTML \ud398\uc774\uc9c0\ub97c \uad6c\uc131 \ud558\uace0 \uc2f6\uc744 \uacbd\uc6b0 \uc544\ub798 \ucf54\ub4dc\ub97c \ucc38\uace0 simple-flask-web-app \ud83c\udf89 Congratulations, you have completed EC2, Flask setup tutorial","title":"Launch an EC2, Deploy Flask app"},{"location":"cloud/aws/ec2-setup/#launch-an-ec2-deploy-flask-app","text":"AWS EC2 \uad6c\uc131 \ubc0f Python Flask \uc571 \ubc30\ud3ec \uc774\ubc88 \uc2e4\uc2b5\uc740 AWS\ub97c \ud1b5\ud574 \uc11c\ube44\uc2a4 \uad6c\uc131 \uc2dc \uac00\uc7a5 \uae30\ubcf8\uc774 \ub418\ub294 EC2 \uad6c\uc131 \uc2e4\uc2b5\uc744 \ud1b5\ud574\uc11c AWS\uc758 \uae30\ubcf8 \uc11c\ube44\uc2a4\ub4e4\uc744 \uc774\ud574 \ud558\uace0 AWS \ucf58\uc194 \ud65c\uc6a9 \ubc29\ubc95\uc744 \uc775\ud788\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. EC2\ub85c \ucef4\ud4e8\ud305 \ub9ac\uc18c\uc2a4 \ud65c\uc6a9 \ubc0f \uc11c\ube44\uc2a4 \ubc30\ud3ec\ub97c \uc704\ud55c \uae30\ubcf8 \uc791\uc5c5\ub4e4\uc744 \uc774\ud574 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Time to Complete: 1-2 hours Tutorial Prereqs: An AWS Account and Administrator-level or PowerUser-level access to it","title":"Launch an EC2, Deploy Flask app"},{"location":"cloud/aws/ec2-setup/#system-architecture","text":"","title":"System Architecture"},{"location":"cloud/aws/ec2-setup/#1-launch-ec2-instance","text":"https://ap-northeast-2.console.aws.amazon.com/ec2/v2/home?region=ap-northeast-2","title":"1. Launch EC2 instance"},{"location":"cloud/aws/ec2-setup/#choose-an-amazon-machine-imageami","text":"Instance \uc758 OS \uc774\ubbf8\uc9c0\ub97c \uc120\ud0dd\ud558\ub294 \ub2e8\uacc4 \uc774\uba70 Amazon Linux, CentOS, Ubunt, WindowsOS \ub4f1 \ub2e4\uc591\ud55c OS \uc774\ubbf8\uc9c0\ub97c \uc120\ud0dd \uac00\ub2a5 Amazon Linux 2 AMI (HVM), SSD Volume Type","title":"Choose an Amazon Machine Image(AMI)"},{"location":"cloud/aws/ec2-setup/#chooose-an-instance-type","text":"Instance\uc758 CPU, Memory , Network \uc6a9\ub7c9\uc744 \uc120\ud0dd \ud558\ub294 \ub2e8\uacc4\uc774\uba70 \uc77c\ubc18 \uc778\uc2a4\ud134\ud2b8 \ud0c0\uc785\uc678\uc5d0 \ub192\uc740 CPU, Memory, IO \ud0c0\uc785\ub3c4 \uc81c\uacf5 t2.micro","title":"Chooose an Instance Type"},{"location":"cloud/aws/ec2-setup/#instance-details","text":"Instance\uac00 \ubc30\ud3ec\ub418\ub294 \ub124\ud2b8\uc6cc\ud06c \ud658\uacbd VPC, Subnet) \uc124\uc815 Number of instances: \ud55c\ubc88\uc5d0 \ubc30\ud3ec\ud560 \uc778\uc2a4\ud134\uc2a4\uc758 \uac1c\uc218\uc774\uba70 1\ub85c \uc720\uc9c0 Purchasing option: Spot instances\ub97c \ud65c\uc6a9 \ud560\uac74\uc9c0\uc758 \uc720\ubb34, \uc120\ud0dd \ud558\uc9c0 \uc54a\uc74c Network: Default VPC \uc120\ud0dd Subnet: No preference Auto-assign Public IP: \uc790\ub3d9\uc73c\ub85c Public IP \ud560\ub2f9 \uc720\ubb34\ub97c \uccb4\ud06c \ud558\ub294 \ubd80\ubd84 Enable\ub85c \uc120\ud0dd IAM role: EC2 \uc778\uc2a4\ud134\uc2a4\uc5d0 IAM \uc5ed\ud560\uc744 \ubd80\uc5ec\ud574 \ucd94\ud6c4 API/ Secret key\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 AWS \uc18c\uc2a4 \uc790\uc6d0\uc744 \uad00\ub9ac \ud558\ub3c4\ub85d \uc124\uc815 \ud558\ub294 \ubd80\ubd84 Tenancy: \ucd94\ud6c4\uc5d0 License\uc774\uc288 \ud639\uc740 \ub9e4\uc6b0 \ub0ae\uc740 \ub124\ud2b8\uc6cc\ud06c Latency\ub97c \uc704\ud574 \ud2b9\uc815 Hardware\uc5d0 Instance\ub97c \ubab0\uc544\uc11c \ubc30\uce58\ud560 \uc218 \uc788\ub294 \uae30\ub2a5, Default(Shared)\ub85c \uc120\ud0dd","title":"Instance Details"},{"location":"cloud/aws/ec2-setup/#instance-storage","text":"Instance\uc758 Disk \uc6a9\ub7c9\uacfc \ucd94\uac00 Disk\ub97c \uc120\ud0dd, Root \ubcfc\ub968 size\uc640 Disk \ubcfc\ub968\uc758 \uc720\ubb34, size\ub97c \uc815\ud558\ub294 \ubd80\ubd84 \uae30\ubcf8 8GB \ub85c \uc9c4\ud589","title":"Instance Storage \uc124\uc815"},{"location":"cloud/aws/ec2-setup/#add-tags","text":"AWS\ucf58\uc194\uc5d0\uc11c Display \ub418\ub294 Tag \uc758 \uac12\uc744 \uc9c0\uc815 \ud558\ub294 \ubd80\ubd84 \uc774\uace0 Add Tag \ud15d \ud074\ub9ad \ud6c4 \uac12 \uc785\ub825 (*\ucd94\ud6c4 \uc190\uc27d\uac8c \uc0dd\uc131\ud55c \uc11c\ubc84\ub97c \ucc3e\uae30 \uc704\ud568\uc774\uba70 \uae30\uc5b5\ud560 \uc218 \uc788\ub294 \uc774\ub984\uc73c\ub85c \uc11c\ubc84 \uc774\ub984 \ubcc0\uacbd \uac00\ub2a5 Key: Name, Value: Web Server","title":"Add Tags"},{"location":"cloud/aws/ec2-setup/#configure-security-group","text":"SG\ub294 Host \ub808\ubca8\uc758 \ubc29\ud654\ubcbd\uc774\uba70 Allow \uc815\ucc45\ub9cc \uac00\ub2a5\ud558\uba70 \uc11c\ube44\uc2a4\ud560 Port \ub9cc \ud5c8\uc6a9 \ud639\uc740 \uc6d0\uaca9 \uc811\uc18d\uc744 \uc704\ud55c \uc811\uadfc \ub300\uc5ed IP \ub85c\ub9cc \uc81c\ud55c\uc744 \ud1b5\ud574 \ubcf4\uc548 \uc218\uc900\uc744 \ub192\uc784 Secuirty Group Name: test-flask-sg SSH(22) Type: SSH Source: My IP or Anywhere TCP(5000, Flask) Type: Custom TCP PORT: 5000 Source: My IP or Anywhere Note \ub9cc\uc57d node.js \ud639\uc740 django \ub85c \uc2e4\uc2b5\uc744 \uc218\ud589\ud560 \uc2dc\uc5d0 \ud574\ub2f9 \ud3ec\ud2b8\uc5d0 \ub9de\uac8c Custom TCP port \uc124\uc815 \ubcc0\uacbd","title":"Configure Security Group"},{"location":"cloud/aws/ec2-setup/#review-instance-launch","text":"Instance \ubc30\ud3ec\ub97c \uc704\ud574 \uc9c0\uc815\ud55c \uc124\uc815\uac12\ub4e4\uc744 \ub9ac\ubdf0 \ud558\ub294 \ub2e8\uacc4 \uc774\uba70 \uc11c\ubc84\uc5d0 \uc811\uadfc\uc744 \uc704\ud55c key \ubc1c\uae09\uc744 \uc9c4\ud589, Launch \ud074\ub9ad\ud6c4 key pair \uc0dd\uc131 Create a new key pair \uc9c4\ud589 \ud6c4 Download Key Pair Warning key\ub294 \uc7ac\ubc1c\uae09 \ub418\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc548\uc804\ud55c \uacf3\uc5d0 key \ub97c \uc800\uc7a5","title":"Review Instance Launch"},{"location":"cloud/aws/ec2-setup/#2-monitor-ec2-instance","text":"\uc815\uc0c1\uc801\uc73c\ub85c Instance\uac00 \ubc30\ud3ec \ub418\ub294\uc9c0 EC2 Dashboard\uc5d0\uc11c \ud655\uc778 \uac00\ub2a5 Status Checks \uac00 2/2\uac00 \ub418\uba74 \uc815\uc0c1 \ubc30\ud3ec \uc644\ub8cc","title":"2. Monitor EC2 instance"},{"location":"cloud/aws/ec2-setup/#3-access-ec2-instance","text":"EC2 \ucf58\uc194 \uc5d0\uc11c \uc0dd\uc131\ud55c \uc778\uc2a4\ud134\uc2a4 \uc120\ud0dd \ud6c4 connect \ubc84\ud2bc\uc744 \ud074\ub9ad\ud558\uba74 \ud130\ubbf8\ub110\ub85c \uc811\uc18d \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5 ssh -i <your_key> ec2-user@<EC2_HOSTNAME> \ub9cc\uc57d Windows\ub97c \uc0ac\uc6a9 \ud558\uace0 \uc788\ub2e4\uba74 Xshell\uc744 \ud65c\uc6a9 \uacf5\uc2dd \ud648\ud398\uc774\uc9c0\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc URL: https://www.netsarang.co.kr/download/main.html \ud56d\ubaa9: Xshell5 https://www.netsarang.co.kr/download/down_form.html?code=512 \uc0c8\ub85c\uc6b4 \uc138\uc158 \uc0dd\uc131 \ubc0f \uc0ac\uc6a9\uc790 \uc778\uc99d","title":"3. Access EC2 instance"},{"location":"cloud/aws/ec2-setup/#4-run-python-flask-on-ec2-server","text":"\uc811\uadfc\ud55c Linux\uc5d0\uc11c Flask \uc124\uce58 pip3 install Flask pip3 freeze > requirements.txt Flask app \ud30c\uc77c \uc124\uc815 app.py cat <<EOF > app.py from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return \"Hello, EC2!\" if __name__ == \"__main__\": app.run(debug=True, host='0.0.0.0', port=5000) EOF Flask app \uc2e4\ud589 python3 app.py EC2 \ucf58\uc194 \uc5d0\uc11c Public IPv4 address \ud655\uc778 \ud639\uc740 \ub9ac\ub205\uc2a4 \ucee4\uba58\ub4dc\ub85c curl ifconfig.me \ud6c4 \ud574\ub2f9 IP\uc5d0 Flask \ud3ec\ud2b8(5000) \uc73c\ub85c \uc811\uc18d \ubc0f \ud398\uc774\uc9c0 \ud655\uc778 (\uc635\uc158) Flask\uc5d0 CSS, HTML \ud398\uc774\uc9c0\ub97c \uad6c\uc131 \ud558\uace0 \uc2f6\uc744 \uacbd\uc6b0 \uc544\ub798 \ucf54\ub4dc\ub97c \ucc38\uace0 simple-flask-web-app \ud83c\udf89 Congratulations, you have completed EC2, Flask setup tutorial","title":"4. Run Python Flask on EC2 server"},{"location":"cloud/gcp/gcp-ce-setup/","text":"Launch a GCE, Deploy Flask app GCP \ud658\uacbd \uad6c\uc131 \ubc0f Compute Engine \uad6c\ucd95 \uc774\ubc88 \uc2e4\uc2b5\uc740 GCP\ub97c \ud1b5\ud574 \uc11c\ube44\uc2a4 \uad6c\uc131 \uc2dc \uac00\uc7a5 \uae30\ubcf8\uc774 \ub418\ub294 Compute Engine \uad6c\uc131 \uc2e4\uc2b5\uc744 \ud1b5\ud574\uc11c GCP\uc758 \uae30\ubcf8 \uc11c\ube44\uc2a4\ub4e4\uc744 \uc774\ud574 \ud558\uace0 GCP \ucf58\uc194 \ud65c\uc6a9 \ubc29\ubc95\uc744 \uc775\ud788\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. Compute Engine \ucef4\ud4e8\ud305 \ub9ac\uc18c\uc2a4 \ud65c\uc6a9 \ubc0f \uc11c\ube44\uc2a4 \ubc30\ud3ec\ub97c \uc704\ud55c \uae30\ubcf8 \uc791\uc5c5\ub4e4\uc744 \uc774\ud574 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Time to Complete: 1-2 hours Tutorial Prereqs: GCP Account and Administrator-level or PowerUser-level access to it System Architecture 1. Launch GCE instance https://console.cloud.google.com/compute Create VM instances Name: gcp-test Region: asia-northeast3(Seoul) Zone: asia-northeast3-a Machine configuration: \uc778\uc2a4\ud134\uc2a4\uc758 \ud06c\uae30(\ud0c0\uc785) Confidential VM service: \ub370\uc774\ud130 \uc554\ud638\ud654 \uc635\uc158( \ubcc0\uacbd \uc5c6\uc74c ) Container: GKE \ud639\uc740 GCE\uc5d0 \ucee8\ud14c\uc774\ub108\ub97c \ud65c\uc6a9 \uc635\uc158( \ubcc0\uacbd \uc5c6\uc74c ) Boot Disk: OS \uc774\ubbf8\uc9c0( Debian ) Identity and API access Service account: \uc778\uc2a4\ud134\uc2a4, \uc778\uc2a4\ud134\uc2a4\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uc571\uc774 \ub2e4\ub978 GCP \uc11c\ube44\uc2a4\uc640 \uc0c1\ud638\uc791\uc6a9 \ud560\ub54c \ud544\uc694\ud55c \uc11c\ube44\uc2a4 \uacc4\uc815( \ubcc0\uacbd \uc5c6\uc74c ) Access scopes: \uc811\uadfc \ubc94\uc704( Allow default access ) Firewall: \ubc29\ud654\ubcbd Allow HTTP traffic ( \ubcc0\uacbd \uc5c6\uc74c ) Create a firewall Flask \uc11c\ube44\uc2a4 \ud3ec\ud2b8(5000)\uc744 custom\ud558\uac8c firewall\uc5d0 \ucd94\uac00\uac00 \ud544\uc694 \ub85c \uc811\uc18d \ud558\uc5ec Create Firewall Rule \uc120\ud0dd \ud6c4 \uc544\ub798\uc640 \uac19\uc774 \uc785\ub825 Name: default-flask-app Network: default Prioity: 1000 Direction of traffic: ingress Action on match: Allow Targets: All instances in the network Source filter: IP ranges Source IP Ranges: 0.0.0.0/0 Protocol and ports: Specified protocols and ports: tcp 5000 Note \ub9cc\uc57d node.js \ud639\uc740 django \ub85c \uc2e4\uc2b5\uc744 \uc218\ud589\ud560 \uc2dc\uc5d0 \ud574\ub2f9 \ud3ec\ud2b8\uc5d0 \ub9de\uac8c Custom TCP port \uc124\uc815 \ubcc0\uacbd 2. Access a GCE instance VM Instance \ucf58\uc194 \ud654\uba74 Connect \ud56d\ubaa9\uc5d0 SSH \ud074\ub9ad \ud6c4 View gcloud command \ub97c \ud1b5\ud574 \uc778\uc2a4\ud134\uc2a4 \uc811\uadfc gcloud command line \ucc3d\uc5d0\uc11c \uc624\ub978\ucabd \uc544\ub798 RUN IN CLOUD SHELL \ud074\ub9ad Cloud Shell\uc774 \uc5f4\ub9ac\uace0 \uc778\uc2a4\ud134\uc2a4 \uc811\uadfc\uc5d0 \ub300\ud55c \ucee4\uba58\ub4dc \ub77c\uc778\uc774 \uc790\ub3d9\uc73c\ub85c \uc785\ub825\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ucd94\uac00 \ubcc0\uacbd \uc5c6\uc774 \uc9c4\ud589 \ud558\uba74 \uc815\uc0c1\uc801\uc73c\ub85c \uc778\uc2a4\ud134\uc2a4\uc5d0 \uc811\uadfc\uc774 \ub428 * SSH Key \uc0dd\uc131\uc774 \uc774\ub8e8\uc5b4\uc9c0\uace0 \ucd94\uac00 \uc785\ub825\uac12 \uc5c6\uc774 \ube48\uce78\uc73c\ub85c \uc9c4\ud589 3. Run Python Flask on GCE server GCE \ub9ac\ub205\uc2a4 \uc11c\ubc84\uc5d0 \uc811\uc18d \ud6c4 python3-pip \ud328\ud0a4\uc9c0 \uc124\uce58 sudo apt update sudo apt install python3-pip \uc811\uadfc\ud55c Linux\uc5d0\uc11c Flask \uc124\uce58 pip3 install Flask pip3 freeze > requirements.txt Flask app \ud30c\uc77c \uc124\uc815 app.py cat <<EOF > app.py from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return \"Hello, GCE!\" if __name__ == \"__main__\": app.run(debug=True, host='0.0.0.0', port=5000) EOF Flask app \uc2e4\ud589 python3 app.py GCE\uc758 External IP\ub97c \ud655\uc778 \ud6c4 \ud574\ub2f9 IP\uc5d0 Flask Port(5000)\uc73c\ub85c \uc811\uc18d \ubc0f \ud398\uc774\uc9c0 \ud655\uc778 (\uc635\uc158) Flask\uc5d0 CSS, HTML \ud398\uc774\uc9c0\ub97c \uad6c\uc131 \ud558\uace0 \uc2f6\uc744 \uacbd\uc6b0 \uc544\ub798 \ucf54\ub4dc\ub97c \ucc38\uace0 simple-flask-web-app \ud83c\udf89 Congratulations, you have completed GCE, Flask setup tutorial","title":"Launch a GCE, Deploy Flask app"},{"location":"cloud/gcp/gcp-ce-setup/#launch-a-gce-deploy-flask-app","text":"GCP \ud658\uacbd \uad6c\uc131 \ubc0f Compute Engine \uad6c\ucd95 \uc774\ubc88 \uc2e4\uc2b5\uc740 GCP\ub97c \ud1b5\ud574 \uc11c\ube44\uc2a4 \uad6c\uc131 \uc2dc \uac00\uc7a5 \uae30\ubcf8\uc774 \ub418\ub294 Compute Engine \uad6c\uc131 \uc2e4\uc2b5\uc744 \ud1b5\ud574\uc11c GCP\uc758 \uae30\ubcf8 \uc11c\ube44\uc2a4\ub4e4\uc744 \uc774\ud574 \ud558\uace0 GCP \ucf58\uc194 \ud65c\uc6a9 \ubc29\ubc95\uc744 \uc775\ud788\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. Compute Engine \ucef4\ud4e8\ud305 \ub9ac\uc18c\uc2a4 \ud65c\uc6a9 \ubc0f \uc11c\ube44\uc2a4 \ubc30\ud3ec\ub97c \uc704\ud55c \uae30\ubcf8 \uc791\uc5c5\ub4e4\uc744 \uc774\ud574 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Time to Complete: 1-2 hours Tutorial Prereqs: GCP Account and Administrator-level or PowerUser-level access to it","title":"Launch a GCE, Deploy Flask app"},{"location":"cloud/gcp/gcp-ce-setup/#system-architecture","text":"","title":"System Architecture"},{"location":"cloud/gcp/gcp-ce-setup/#1-launch-gce-instance","text":"https://console.cloud.google.com/compute","title":"1. Launch GCE instance"},{"location":"cloud/gcp/gcp-ce-setup/#create-vm-instances","text":"Name: gcp-test Region: asia-northeast3(Seoul) Zone: asia-northeast3-a Machine configuration: \uc778\uc2a4\ud134\uc2a4\uc758 \ud06c\uae30(\ud0c0\uc785) Confidential VM service: \ub370\uc774\ud130 \uc554\ud638\ud654 \uc635\uc158( \ubcc0\uacbd \uc5c6\uc74c ) Container: GKE \ud639\uc740 GCE\uc5d0 \ucee8\ud14c\uc774\ub108\ub97c \ud65c\uc6a9 \uc635\uc158( \ubcc0\uacbd \uc5c6\uc74c ) Boot Disk: OS \uc774\ubbf8\uc9c0( Debian ) Identity and API access Service account: \uc778\uc2a4\ud134\uc2a4, \uc778\uc2a4\ud134\uc2a4\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uc571\uc774 \ub2e4\ub978 GCP \uc11c\ube44\uc2a4\uc640 \uc0c1\ud638\uc791\uc6a9 \ud560\ub54c \ud544\uc694\ud55c \uc11c\ube44\uc2a4 \uacc4\uc815( \ubcc0\uacbd \uc5c6\uc74c ) Access scopes: \uc811\uadfc \ubc94\uc704( Allow default access ) Firewall: \ubc29\ud654\ubcbd Allow HTTP traffic ( \ubcc0\uacbd \uc5c6\uc74c )","title":"Create VM instances"},{"location":"cloud/gcp/gcp-ce-setup/#create-a-firewall","text":"Flask \uc11c\ube44\uc2a4 \ud3ec\ud2b8(5000)\uc744 custom\ud558\uac8c firewall\uc5d0 \ucd94\uac00\uac00 \ud544\uc694 \ub85c \uc811\uc18d \ud558\uc5ec Create Firewall Rule \uc120\ud0dd \ud6c4 \uc544\ub798\uc640 \uac19\uc774 \uc785\ub825 Name: default-flask-app Network: default Prioity: 1000 Direction of traffic: ingress Action on match: Allow Targets: All instances in the network Source filter: IP ranges Source IP Ranges: 0.0.0.0/0 Protocol and ports: Specified protocols and ports: tcp 5000 Note \ub9cc\uc57d node.js \ud639\uc740 django \ub85c \uc2e4\uc2b5\uc744 \uc218\ud589\ud560 \uc2dc\uc5d0 \ud574\ub2f9 \ud3ec\ud2b8\uc5d0 \ub9de\uac8c Custom TCP port \uc124\uc815 \ubcc0\uacbd","title":"Create a firewall"},{"location":"cloud/gcp/gcp-ce-setup/#2-access-a-gce-instance","text":"VM Instance \ucf58\uc194 \ud654\uba74 Connect \ud56d\ubaa9\uc5d0 SSH \ud074\ub9ad \ud6c4 View gcloud command \ub97c \ud1b5\ud574 \uc778\uc2a4\ud134\uc2a4 \uc811\uadfc gcloud command line \ucc3d\uc5d0\uc11c \uc624\ub978\ucabd \uc544\ub798 RUN IN CLOUD SHELL \ud074\ub9ad Cloud Shell\uc774 \uc5f4\ub9ac\uace0 \uc778\uc2a4\ud134\uc2a4 \uc811\uadfc\uc5d0 \ub300\ud55c \ucee4\uba58\ub4dc \ub77c\uc778\uc774 \uc790\ub3d9\uc73c\ub85c \uc785\ub825\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ucd94\uac00 \ubcc0\uacbd \uc5c6\uc774 \uc9c4\ud589 \ud558\uba74 \uc815\uc0c1\uc801\uc73c\ub85c \uc778\uc2a4\ud134\uc2a4\uc5d0 \uc811\uadfc\uc774 \ub428 * SSH Key \uc0dd\uc131\uc774 \uc774\ub8e8\uc5b4\uc9c0\uace0 \ucd94\uac00 \uc785\ub825\uac12 \uc5c6\uc774 \ube48\uce78\uc73c\ub85c \uc9c4\ud589","title":"2. Access a GCE instance"},{"location":"cloud/gcp/gcp-ce-setup/#3-run-python-flask-on-gce-server","text":"GCE \ub9ac\ub205\uc2a4 \uc11c\ubc84\uc5d0 \uc811\uc18d \ud6c4 python3-pip \ud328\ud0a4\uc9c0 \uc124\uce58 sudo apt update sudo apt install python3-pip \uc811\uadfc\ud55c Linux\uc5d0\uc11c Flask \uc124\uce58 pip3 install Flask pip3 freeze > requirements.txt Flask app \ud30c\uc77c \uc124\uc815 app.py cat <<EOF > app.py from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return \"Hello, GCE!\" if __name__ == \"__main__\": app.run(debug=True, host='0.0.0.0', port=5000) EOF Flask app \uc2e4\ud589 python3 app.py GCE\uc758 External IP\ub97c \ud655\uc778 \ud6c4 \ud574\ub2f9 IP\uc5d0 Flask Port(5000)\uc73c\ub85c \uc811\uc18d \ubc0f \ud398\uc774\uc9c0 \ud655\uc778 (\uc635\uc158) Flask\uc5d0 CSS, HTML \ud398\uc774\uc9c0\ub97c \uad6c\uc131 \ud558\uace0 \uc2f6\uc744 \uacbd\uc6b0 \uc544\ub798 \ucf54\ub4dc\ub97c \ucc38\uace0 simple-flask-web-app \ud83c\udf89 Congratulations, you have completed GCE, Flask setup tutorial","title":"3. Run Python Flask on GCE server"}]}